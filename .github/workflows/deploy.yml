name: Deploy

on:
  push:
    branches:
      - master
    paths-ignore:
    - 'bigquery/**'
    - 'documentation/**'    
    - 'terraform/common/**'
    - 'terraform/monitoring/**'

env:
 DOCKERHUB_REPOSITORY: dfedigital/teaching-vacancies

jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: softprops/turnstyle@v1
      name: Check workflow concurrency
      with:
        poll-interval-seconds: 20
        same-branch-only: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: build docker image and deploy
    needs: turnstyle
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.4

    - name: Set environment variables
      id: set_env_vars
      run: |
        TAG=${GITHUB_SHA}
        echo "TAG=${TAG}" >> $GITHUB_ENV

    - name: Set up Ruby 2.7
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7

    - name: Validate secrets
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        gem install aws-sdk-ssm --no-document
        bin/run-in-env -t /tvs/staging -o quiet \
          && echo Data in /tvs/staging looks valid
        bin/run-in-env -t /tvs/production -o quiet \
          && echo Data in /tvs/production looks valid

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push docker image from builder target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
        push: true
        tags: ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
        target: builder

    - name: Build and push docker image from production target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
          ${{ env.DOCKERHUB_REPOSITORY }}:master
        push: true
        tags: |
          ${{ env.DOCKERHUB_REPOSITORY }}:master
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.TAG }}
        target: production

    - name: Deploy to staging
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${DOCKERHUB_REPOSITORY}:${TAG}
        terraform init -input=false terraform/app
        terraform workspace select staging terraform/app || terraform workspace new staging terraform/app
        terraform apply -var-file terraform/workspace-variables/staging.tfvars -auto-approve -input=false terraform/app

    - name: Run Smoke Test
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: Smoke Test Manual # Workflow name
        token: ${{ secrets.PERSONAL_TOKEN }}
        inputs: '{ "environment": "staging" }'
        ref: ${{ github.sha }}

    # This step will retry until required check passes
    # and will fail the whole workflow if the check conclusion is not a success
    - name: Wait on Smoke Test result
      uses: lewagon/wait-on-check-action@v0.1
      with:
        ref: ${{ github.sha }} # branch, commit SHA or tag
        check-name: Smoke Test Manual Job # Job name within workflow
        repo-token: ${{ secrets.PERSONAL_TOKEN }}
        wait-interval: 120 # seconds

    - name: Deploy to production
      if: github.ref == 'refs/heads/master'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${DOCKERHUB_REPOSITORY}:${TAG}
        terraform workspace select production terraform/app || terraform workspace new production terraform/app
        terraform apply -var-file terraform/workspace-variables/production.tfvars -auto-approve -input=false terraform/app

    - name: Send success message to twd_tv_dev channel
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2.1.0
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':tada:'
        SLACK_TITLE: Deployment success
        SLACK_MESSAGE: 'Deployment to production on GOV.UK PaaS successful :rocket:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure message to twd_tv_dev channel
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.1.0
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':cry:'
        SLACK_TITLE: Deployment failure
        SLACK_MESSAGE: 'Deployment to production failed'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
