name: Deploy

on:
  push:
    branches:
      - master
    paths-ignore:
    - 'bigquery/**'
    - 'documentation/**'
    - 'terraform/common/**'
    - '**.md'

env:
 DOCKER_REPOSITORY: ghcr.io/dfe-digital/teaching-vacancies

jobs:

  build:
    name: build image

    runs-on: ubuntu-20.04
    steps:

      - uses: DFE-Digital/github-actions/turnstyle@master
        name: Check workflow concurrency
        with:
          initial-wait-seconds: 12
          poll-interval-seconds: 20
          abort-after-seconds: 300
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}

      - name: Build and push docker image from builder target
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ github.sha }}
          cache-from: |
            ${{ env.DOCKER_REPOSITORY }}:builder-master
          push: true
          tags: ${{ env.DOCKER_REPOSITORY }}:builder-master
          target: builder

      - name: Build and push docker image from production target
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ github.sha }}
          cache-from: |
            ${{ env.DOCKER_REPOSITORY }}:builder-master
            ${{ env.DOCKER_REPOSITORY }}:master
          push: true
          tags: |
            ${{ env.DOCKER_REPOSITORY }}:master
            ${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
          target: production

  deploy:
    name: deploy

    strategy:
      max-parallel: 1
      matrix:
        environment: ["staging", "production", "qa"]
    needs: build
    runs-on: ubuntu-20.04

    steps:

    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
        role-to-assume: Deployments
        role-duration-seconds: 3600
        role-skip-session-tagging: true

    - name: Set environment variables
      id: set_env_vars
      run: |
        echo "TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.5
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1

    - name: Download fetch_config.rb
      shell: bash
      run: |
        echo "::group:: Download fetch_config.rb script"
        curl -s https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/master/scripts/fetch_config/fetch_config.rb -o bin/fetch_config.rb
        chmod +x bin/fetch_config.rb
        echo "::endgroup::"

    - name: Validate ${{ matrix.environment }} secrets
      shell: bash
      run: |
        gem install aws-sdk-ssm --no-document
        bin/fetch_config.rb -s aws-ssm-parameter-path:/teaching-vacancies/${{ matrix.environment }}/app -d quiet \
          && echo Data in /teaching-vacancies/${{ matrix.environment }} looks valid

    - name: Terraform pin version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.7

    - name: Trigger Deploy App Workflow for ${{ matrix.environment }}
      uses: benc-uk/workflow-dispatch@v1.1
      with:
        workflow: Deploy App to Environment # Workflow name
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        ref: ${{ steps.tag_version.outputs.new_tag }}
        inputs: '{"environment": "${{ matrix.environment }}", "tag": "${{ github.sha }}"}'

    - name: Wait for Deploy App Workflow for ${{ matrix.environment }}
      id: wait_for_deploy_app_staging
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        checkName: Deploy ${{ github.sha }} to ${{ matrix.environment }} # Job name within workflow
        ref: ${{ steps.tag_version.outputs.new_tag }}
        timeoutSeconds: 720
        intervalSeconds: 15

    - name: Notify twd_tv_dev channel on ${{ matrix.environment }} deployment failure
      if: steps.wait_for_deploy_app_staging.outputs.conclusion != 'success' && 'refs/heads/master'
      uses: rtCamp/action-slack-notify@v2.1.3
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Deployment failure
        SLACK_MESSAGE: 'Deployment of Docker tag ${{ github.sha }} to ${{ matrix.environment }} - unsuccessful <!channel>'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Exit whole workflow if ${{ matrix.environment }} deployment was not successful
      if: steps.wait_for_deploy_app_staging.outputs.conclusion != 'success' && 'refs/heads/master'
      run: exit 1

    - name: Trigger Smoke Test
      uses: benc-uk/workflow-dispatch@v1.1
      with:
        workflow: Smoke Test
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        inputs: '{"paas_environment": "${{ matrix.environment }}", "sha": "${{ github.sha }}"}'
        ref: ${{ steps.tag_version.outputs.new_tag }}

    - name: Wait for smoke test
      id: wait_for_smoke_test
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        checkName: Smoke Test ${{ matrix.environment }} ${{ github.sha }}
        ref: ${{ steps.tag_version.outputs.new_tag }}
        timeoutSeconds: 300
        intervalSeconds: 15

    - name: Exit whole workflow if ${{ matrix.environment }} smoke test was not successful
      if: steps.wait_for_smoke_test.outputs.conclusion != 'success' && github.ref == 'refs/heads/master'
      run: exit 1

    - name: Send job status message to twd_tv_dev channel
      if: failure() && github.ref == 'refs/heads/master'
      uses: rtCamp/action-slack-notify@v2.1.3
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Deployment ${{ job.status }}
        SLACK_MESSAGE: 'Deployment of Docker tag ${{ github.sha }} to ${{matrix.environment}} - ${{ job.status }}'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  post_deployment:
    name: post deployment steps
    needs: deploy
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        name: Checkout Code

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          role-to-assume: Deployments
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Terraform pin version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.7

      - name: Deploy monitoring
        run: |

          export TF_VAR_paas_app_docker_image=${{ env.DOCKER_REPOSITORY }}:${{ github.sha }}
          terraform init -upgrade=true -reconfigure -input=false
          terraform apply -input=false -auto-approve
        working-directory: terraform/monitoring
      - name: Download and extract Gov.UK frontend archive
        shell: bash
        run: bin/regenerate-offline
      - name: Sync offline S3 bucket
        shell: bash
        run: bin/sync-offline
      - name: Send job status message to twd_tv_dev channel
        if: always() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@v2.1.3
        env:
          SLACK_CHANNEL: twd_tv_dev
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Deployment ${{ job.status }}
          SLACK_MESSAGE: 'Deployment of Docker tag ${{ github.sha }} to Staging, Prod and QA - ${{ job.status }}'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
