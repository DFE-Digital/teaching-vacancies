name: Deploy

on:
  push:
    branches:
      - master

env:
 DOCKERHUB_REPOSITORY: dfedigital/teaching-vacancies
 CF_PROVIDER_VERSION: 0.12.4

jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: softprops/turnstyle@v1
      name: Check workflow concurrency
      with:
        poll-interval-seconds: 20
        same-branch-only: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: build docker image and deploy
    needs: turnstyle
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code
      
    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.1

    - name: Set environment variables
      id: set_env_vars
      run: |
        TAG=${GITHUB_SHA}
        echo ::set-env name=TAG::${TAG}
        echo ::set-env name=DOCKER_BUILDKIT::1

    - name: build and push docker image
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKERHUB_REPOSITORY }}
        tags: ${{ env.TAG }}
        target: production

    - name: Deploy to staging
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${DOCKERHUB_REPOSITORY}:${TAG}
        terraform init -input=false terraform/app
        terraform workspace select staging terraform/app || terraform workspace new staging terraform/app
        terraform apply -var-file terraform/workspace-variables/staging.tfvars -auto-approve -input=false terraform/app

    - name: Set up Ruby
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7.1

    - name: Set up ruby gem cache
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install gems
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 20 --retry 3

    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Run smoke test
      run: bundle exec rspec spec/smoke_tests/job_seekers_can_view_homepage_staging_spec.rb --tag smoke_test

    - name: Deploy to production
      if: github.ref == 'refs/heads/master'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${DOCKERHUB_REPOSITORY}:${TAG}
        terraform workspace select production terraform/app || terraform workspace new production terraform/app
        terraform apply -var-file terraform/workspace-variables/production.tfvars -auto-approve -input=false terraform/app

    - name: Send success message to twd_tv_dev channel
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':tada:'
        SLACK_TITLE: Deployment success
        SLACK_MESSAGE: 'Deployment to production on GOV.UK PaaS successful :rocket:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure message to twd_tv_dev channel
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':cry:'
        SLACK_TITLE: Deployment failure
        SLACK_MESSAGE: 'Deployment to production failed'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
