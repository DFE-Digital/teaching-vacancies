name: Deploy App to Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
      tag:
        description: Docker tag
        required: true

env:
 DOCKER_REPOSITORY: ghcr.io/dfe-digital/teaching-vacancies

jobs:
  turnstyle:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
    - uses: DFE-Digital/github-actions/turnstyle@master
      name: Check workflow concurrency
      with:
        initial-wait-seconds: 12
        poll-interval-seconds: 20
        same-branch-only: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy-app:
    name: Deploy ${{ github.event.inputs.tag }} to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
        role-to-assume: Deployments
        role-duration-seconds: 3600
        role-skip-session-tagging: true

    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.7

    - name: Set environment variables for review
      if: startsWith(github.event.inputs.environment, 'review')
      run: |
        BACKEND_CONFIG=-backend-config="key=review/${{ github.event.inputs.environment }}.tfstate"
        PARAMETER_STORE_ENVIRONMENT=dev
        TF_VAR_environment=${{ github.event.inputs.environment }}
        VAR_FILE=review
        echo "BACKEND_CONFIG=${BACKEND_CONFIG}" >> $GITHUB_ENV
        echo "PARAMETER_STORE_ENVIRONMENT=${PARAMETER_STORE_ENVIRONMENT}" >> $GITHUB_ENV
        echo "TF_VAR_environment=${TF_VAR_environment}" >> $GITHUB_ENV
        echo "VAR_FILE=${VAR_FILE}" >> $GITHUB_ENV

    - name: Set environment variables for non-review environments
      if: startsWith(github.event.inputs.environment, 'review') != true
      run: |
        BACKEND_CONFIG=-backend-config="key=${{ github.event.inputs.environment }}/app.tfstate"
        PARAMETER_STORE_ENVIRONMENT=${{ github.event.inputs.environment }}
        VAR_FILE=${{ github.event.inputs.environment }}
        echo "BACKEND_CONFIG=${BACKEND_CONFIG}" >> $GITHUB_ENV
        echo "PARAMETER_STORE_ENVIRONMENT=${PARAMETER_STORE_ENVIRONMENT}" >> $GITHUB_ENV
        echo "VAR_FILE=${VAR_FILE}" >> $GITHUB_ENV

    #TODO - This needs to be refactored in the future; as the logic is already in the Makefile
    - name: Set environment variables for Pentest
      if: startsWith(github.event.inputs.environment, 'pentest')
      run: |
        BACKEND_CONFIG=-backend-config="key=dev/app-${{ github.event.inputs.environment }}.tfstate"
        PARAMETER_STORE_ENVIRONMENT=qa
        TF_VAR_environment=${{ github.event.inputs.environment }}
        VAR_FILE=${{ github.event.inputs.environment }}
        echo "BACKEND_CONFIG=${BACKEND_CONFIG}" >> $GITHUB_ENV
        echo "PARAMETER_STORE_ENVIRONMENT=${PARAMETER_STORE_ENVIRONMENT}" >> $GITHUB_ENV
        echo "TF_VAR_environment=${TF_VAR_environment}" >> $GITHUB_ENV
        echo "VAR_FILE=${VAR_FILE}" >> $GITHUB_ENV

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1

    - name: Download fetch_config.rb
      shell: bash
      run: |
        echo "::group:: Download fetch_config.rb script"
        curl -s https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/master/scripts/fetch_config/fetch_config.rb -o bin/fetch_config.rb
        chmod +x bin/fetch_config.rb
        echo "::endgroup::"

    - name: Validate secrets
      shell: bash
      run: |
        gem install aws-sdk-ssm --no-document
        bin/fetch_config.rb -s aws-ssm-parameter-path:/teaching-vacancies/${{ env.PARAMETER_STORE_ENVIRONMENT }}/app -d quiet \
          && echo Data in "/teaching-vacancies/${{ env.PARAMETER_STORE_ENVIRONMENT }}" looks valid

    - name: Deploy to environment
      env:
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${{ env.DOCKER_REPOSITORY }}:${{ github.event.inputs.tag }}
        terraform init -reconfigure -input=false ${{ env.BACKEND_CONFIG }}

      working-directory: terraform/app
