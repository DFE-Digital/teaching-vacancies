name: Deploy

on:
  push:
    branches:
      - dev
      - staging

env:
 DOCKERHUB_REPOSITORY: dfedigital/teaching-vacancies
 CF_PROVIDER_VERSION: v0.12.2

jobs:
  deploy:
    name: build docker image and deploy
    runs-on: ubuntu-latest
    outputs:
      BRANCH: ${{ steps.set_env_vars.outputs.BRANCH }}
      TAG: ${{ steps.set_env_vars.outputs.TAG }}
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.1

    - name: Set environment variables
      id: set_env_vars
      run: |
        BRANCH=$(echo ${GITHUB_REF} | cut -d/ -f3)
        TAG=${BRANCH}-${GITHUB_SHA}-$(date '+%Y%m%d%H%M%S')
        echo ::set-env name=BRANCH::${BRANCH}
        echo ::set-env name=TAG::${TAG}
        echo ::set-env name=CF_PROVIDER_BINARY::terraform-provider-cloudfoundry_v${CF_PROVIDER_VERSION}
        echo ::set-env name=CF_PROVIDER_URL::https://github.com/cloudfoundry-community/terraform-provider-cf/releases/download/v${CF_PROVIDER_VERSION}/terraform-provider-cloudfoundry_linux_amd64
        echo ::set-output name=BRANCH::${BRANCH}
        echo ::set-output name=TAG::${TAG}

    - name: build and push docker image
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKERHUB_REPOSITORY }}
        tags: ${{ env.TAG }}
        target: production

    - name: Terraform install CloudFoundry provider
      run: |
        CF_PROVIDER_DIR=$HOME/.local/share/terraform/plugins/terraform.implied.local.mirror/cloudfoundrylocal/cloudfoundry/${CF_PROVIDER_VERSION}/linux_amd64
        mkdir -p ${CF_PROVIDER_DIR}
        wget -O ${CF_PROVIDER_DIR}/${CF_PROVIDER_BINARY} ${CF_PROVIDER_URL}
        chmod +x ${CF_PROVIDER_DIR}/${CF_PROVIDER_BINARY}
        echo "Content of directory ${CF_PROVIDER_DIR}:"
        cd ${CF_PROVIDER_DIR} && pwd
        ls -l

    - name: Terraform fmt check
      run: |
        set -eux
        terraform fmt -check -recursive terraform/app

    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_WORKSPACE=${BRANCH}
        export TF_VAR_paas_app_docker_image=${DOCKERHUB_REPOSITORY}:${TAG}
        terraform init -input=false terraform/app
        terraform apply -var-file terraform/workspace-variables/${BRANCH}.tfvars -auto-approve -input=false terraform/app

  notify:
    needs: deploy
    name: Slack notification
    runs-on: ubuntu-latest
    steps:
      - name: Send slack message to twd_tv_dev channel
        uses: rtCamp/action-slack-notify@v2.0.2
        env:
          SLACK_CHANNEL: twd_tv_dev
          SLACK_USERNAME: CI Deployment
          SLACK_ICON_EMOJI: ':tada:'
          SLACK_TITLE: Successful deployment
          SLACK_MESSAGE: 'Deployment of ${{ needs.deploy.outputs.TAG }} to ${{ needs.deploy.outputs.BRANCH }} on GOV.UK PaaS successful :rocket:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
