name: Test

on:
  push:
    branches:
      - '**'

jobs:
  backend-tests:
    name: Run RSpec Tests in parallel

    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

    env:
      DATABASE_URL: postgis://postgres:postgres@localhost:5432
      RAILS_ENV: test
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

    services:
      postgres:
        image: postgis/postgis:14-3.4-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # need depth 0 for undercover to work properly
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare application environment
        uses: ./.github/actions/prepare-app-env

      - name: Set up test database
        run: bundle exec rake db:create db:schema:load parallel:create parallel:load_schema

      - name: Generate Swagger (OpenAPI) docs
        run: bundle exec rake rswag:specs:swaggerize

      - name: Precompile assets
        run: bin/rails assets:precompile

      - name: Cache Test Runtimes
        uses: actions/cache@v4
        with:
          path: "tmp/parallel_runtime_rspec.log"
          key: ${{ runner.os }}-spec-${{ hashFiles('**/*spec.rb') }}
          restore-keys: |
            ${{ runner.os }}-spec-

      - name: Run tests in parallel
        env:
          PARALLEL_TEST_PROCESSORS: 4
          PARALLEL_TEST_FIRST_IS_1: true
          COVERAGE: 1
        run: bundle exec rake parallel:spec

      # Tests may fail due to lack of coverage, so always run coverage upload and checks
      # to help diagnose issues
      - name: Upload Coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage report
          path: coverage

      - name: Check coverage
        if: always()
        run: bundle exec undercover -c origin/main

      - name: Upload Capybara failures screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: capybara-screenshots
          path: /home/runner/work/teaching-vacancies/teaching-vacancies/tmp/capybara/*.png
          if-no-files-found: ignore # If only non-capybara tests fail there will be no screenshots


  frontend-tests:
    name: Run frontend JS unit tests

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare application environment
        uses: ./.github/actions/prepare-app-env
        with:
          skip-ruby: true

      - name: run frontend tests and linting
        run: yarn run js:test
