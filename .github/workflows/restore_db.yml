name: Restore sanitised backup to non-prod environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
      backup_filename:
        description: 'Filename to restore'
        required: true
jobs:
  sync:
    name: Restore sanitised backup to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
        role-to-assume: Deployments
        role-duration-seconds: 3600
        role-skip-session-tagging: true

    - name: Set PaaS space name
      shell: bash
      run: |
        PAAS_SPACE_NAME=$(jq -r .paas_space_name terraform/workspace-variables/${{ github.event.inputs.environment }}.tfvars.json)
        echo "PAAS_SPACE_NAME=${PAAS_SPACE_NAME}" >> $GITHUB_ENV

    - name: Get CF_USERNAME From ParameterStore
      uses: marvinpinto/action-inject-ssm-secrets@latest
      with:
        ssm_parameter: /teaching-vacancies/github_action/infra/cf_username_prod
        env_variable_name: CF_USERNAME_PROD

    - name: Get CF_PASSWORD From ParameterStore
      uses: marvinpinto/action-inject-ssm-secrets@latest
      with:
        ssm_parameter: /teaching-vacancies/github_action/infra/cf_password_prod
        env_variable_name: CF_PASSWORD

    - name: Get SLACK_WEBHOOK From ParameterStore
      uses: marvinpinto/action-inject-ssm-secrets@latest
      with:
        ssm_parameter: /teaching-vacancies/github_action/infra/slack_webhook
        env_variable_name: SLACK_WEBHOOK

    - name: Setup cf cli
      uses: DFE-Digital/github-actions/setup-cf-cli@master
      with:
        CF_USERNAME: ${{env.CF_USERNAME_PROD}}
        CF_PASSWORD: ${{env.CF_PASSWORD}}
        CF_SPACE_NAME: teaching-vacancies-production
        INSTALL_CONDUIT: true

    - name: Install postgres client
      uses: DFE-Digital/github-actions/install-postgres-client@master

    - name: Download sanitised backup from S3
      shell: bash
      run: bin/download-db-backup
      env:
        BACKUP_TYPE: sanitised
        BACKUP_FILENAME: ${{ github.event.inputs.backup_filename }}

    - name: Restore sanitised database from downloaded dump
      shell: bash
      run: bin/restore-db
      env:
        CF_DESTINATION_ENVIRONMENT: ${{ github.event.inputs.environment }}
        CF_SPACE_NAME: ${{ env.PAAS_SPACE_NAME }}
        BACKUP_TYPE: sanitised

    - name: Send job status message to twd_tv_dev channel
      if: always() && github.ref == 'refs/heads/main'
      uses: rtCamp/action-slack-notify@v2.2.1
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Deployment ${{ job.status }}
        SLACK_MESSAGE: 'Restore sanitised production DB to ${{ github.event.inputs.environment }} - ${{ job.status }}'
        SLACK_WEBHOOK: ${{env.SLACK_WEBHOOK}}
