name: Review

on:
  pull_request:
    branches: [ master ]
    types: [opened, synchronize]

env:
  CF_PROVIDER_VERSION: 0.12.6
  DOCKERHUB_REPOSITORY: dfedigital/teaching-vacancies
  PR_NAME: ${{ format('pr-{0}', github.event.number) }}

jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - uses: softprops/turnstyle@v1
      name: Check workflow concurrency
      with:
        poll-interval-seconds: 20
        same-branch-only: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: Create review app
    needs: turnstyle
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Set up Ruby 2.7
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7

    - name: Validate secrets
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        gem install aws-sdk-ssm --no-document
        bin/run-in-env -t /tvs/dev -o quiet \
          && echo Data in /tvs/dev looks valid

    - name: Terraform pin version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.4

    - name: Set environment variables
      id: set_env_vars
      run: |
        BRANCH=${{ github.head_ref }}
        TAG=review-${PR_NAME}-${GITHUB_SHA}-$(date '+%Y%m%d%H%M%S')
        echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        echo "TAG=${TAG}" >> $GITHUB_ENV
        echo ::set-output name=BRANCH::${BRANCH}
        echo ::set-output name=TAG::${TAG}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push docker image from builder target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-${{ env.BRANCH }}
        push: true
        tags: ${{ env.DOCKERHUB_REPOSITORY }}:builder-${{ env.BRANCH }}
        target: builder

    - name: Build and push docker image from production target
      uses: docker/build-push-action@v2
      with:
        build-args: BUILDKIT_INLINE_CACHE=1
        cache-from: |
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-master
          ${{ env.DOCKERHUB_REPOSITORY }}:builder-${{ env.BRANCH }}
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.BRANCH }}
        push: true
        tags: |
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.TAG }}
          ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.BRANCH }}
        target: production

    - name: Run Smoke Test
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: Smoke Test Manual # Workflow name
        token: ${{ secrets.PERSONAL_TOKEN }}
        inputs: '{ "environment": "staging" }'

    # This step will retry until required check passes
    # and will fail the whole workflow if the check conclusion is not a success
    - name: Wait on Smoke Test result
      uses: lewagon/wait-on-check-action@v0.1
      with:
        ref: ${{ github.event.pull_request.head.ref }} # can be commit SHA or tag too
        check-name: Smoke Test Manual Job # Job name within workflow
        repo-token: ${{ secrets.PERSONAL_TOKEN }}
        wait-interval: 120 # seconds

    - name: Terraform deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_paas_user: ${{ secrets.CF_USERNAME }}
        TF_VAR_paas_password: ${{ secrets.CF_PASSWORD }}
      run: |
        export TF_VAR_paas_app_docker_image=${DOCKERHUB_REPOSITORY}:${TAG}
        export TF_VAR_environment=review-${PR_NAME}
        terraform init -input=false -backend-config="workspace_key_prefix=review:" terraform/app
        terraform workspace select review-${PR_NAME} terraform/app || terraform workspace new review-${PR_NAME} terraform/app
        terraform apply -var-file terraform/workspace-variables/review.tfvars -auto-approve -input=false terraform/app

    - name: Post PR comment
      if: ${{ success() }}
      run: |
        curl --header "Accept: application/vnd.github.v3+json" \
             --header "Authorization: Bearer ${{ github.token }}" \
             --request POST \
             --data '{"body": "Review app deployed to https://teaching-vacancies-review-${{ format('pr-{0}', github.event.number) }}.london.cloudapps.digital"}' \
             https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments

    - name: Send success message to twd_tv_dev channel
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':tada:'
        SLACK_TITLE: Deployment success
        SLACK_MESSAGE: 'Review app for PR ${{ github.event.number }} deployed to https://teaching-vacancies-review-${{ env.PR_NAME }}.london.cloudapps.digital :rocket:'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure message to twd_tv_dev channel
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_ICON_EMOJI: ':cry:'
        SLACK_TITLE: Deployment failure
        SLACK_MESSAGE: 'Review app deployment failed for PR ${{ github.event.number }}'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
