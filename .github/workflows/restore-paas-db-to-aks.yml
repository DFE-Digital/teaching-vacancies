name: Backup and restore Postgres DB from PAAS to AKS

on:
  workflow_call:
    inputs:
      environment:
        type: string
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options:
          - qa
          - review
          - staging
          - production

env:
  BACKUP_ARTIFACT_NAME: ${{ inputs.environment }}-backup
  ENVIRONMENT_NAME: ${{ inputs.environment }}

jobs:
  backup:
    name: Backup from PAAS
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: DFE-Digital/github-actions/install-postgres-client@master

    - name: Set environment variables
      shell: bash
      run: |
        tf_vars_file=terraform/workspace-variables/${{ env.ENVIRONMENT_NAME }}.tfvars.json
        echo "PAAS_SPACE=$(jq -r '.paas_space_name' ${tf_vars_file})" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2
        role-to-assume: Deployments
        role-duration-seconds: 3600
        role-skip-session-tagging: true

    - name: Get CF_USERNAME From ParameterStore
      id: get-cf-username
      uses: marvinpinto/action-inject-ssm-secrets@latest
      with:
        ssm_parameter: /teaching-vacancies/github_action/infra/cf_username_non_prod
        env_variable_name: CF_USERNAME

    - name: Get CF_PASSWORD From ParameterStore
      id: get-cf-password
      uses: marvinpinto/action-inject-ssm-secrets@latest
      with:
        ssm_parameter: /teaching-vacancies/github_action/infra/cf_password_non_prod
        env_variable_name: CF_PASSWORD


    - uses: DFE-Digital/github-actions/setup-cf-cli@master
      with:
        CF_USERNAME: ${{ env.CF_USERNAME }}
        CF_PASSWORD: ${{ env.CF_PASSWORD }}
        CF_SPACE_NAME: ${{ env.PAAS_SPACE }}
        INSTALL_CONDUIT: true

    - name: Backup database
      run: |
        cf conduit  teaching-vacancies-postgres-${{ env.ENVIRONMENT_NAME }} -- pg_dump -E utf8 --clean --compress=1 --if-exists --no-owner --no-privileges --verbose -f backup.sql.gz

    - name: Upload backup
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BACKUP_ARTIFACT_NAME }}
        path: backup.sql.gz
        retention-days: 1

  restore:
      name: Restore to AKS
      runs-on: ubuntu-latest
      needs: backup

      environment: ${{ inputs.environment }}

      steps:
      - uses: actions/checkout@v4

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: |
          test_cluster_rg=s189t01-tsc-ts-rg
          test_cluster_name=s189t01-tsc-test-aks
          prod_cluster_rg=s189p01-tsc-pd-rg
          prod_cluster_name=s189p01-tsc-production-aks

          case "${ENVIRONMENT_NAME}" in
          qa)
            echo "cluster_rg=$test_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$test_cluster_name" >> $GITHUB_ENV
            ;;
          review)
            echo "cluster_rg=$test_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$test_cluster_name" >> $GITHUB_ENV
            ;;
          staging)
            echo "cluster_rg=$test_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$test_cluster_name" >> $GITHUB_ENV
            ;;
          production)
            echo "cluster_rg=$prod_cluster_rg" >> $GITHUB_ENV
            echo "cluster_name=$prod_cluster_name" >> $GITHUB_ENV
            ;;
          *)
            echo "unknown cluster"
            ;;
          esac

      - uses: azure/setup-kubectl@v3

      - run: |
          az aks get-credentials -g ${{ env.cluster_rg }} -n ${{ env.cluster_name }}
          make bin/konduit.sh

      - name: Download backup
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BACKUP_ARTIFACT_NAME }}

      - name: Restore database
        run: bin/konduit.sh  -i backup.sql.gz -c teaching-vacancies-${{ env.ENVIRONMENT_NAME }} -- psql

      - name: Remove PaaS event triggers
        shell: bash
        run: |
          bin/konduit.sh   teaching-vacancies-${{ env.ENVIRONMENT_NAME }} -- psql -c 'drop event trigger forbid_ddl_reader; drop event trigger make_readable; drop event trigger reassign_owned;'

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ env.BACKUP_ARTIFACT_NAME }}
