name: Build and deploy

on:
  push:
    branches:
    - master
    - dev     # Push to branch other than master deploys directly to environment with the same name. ie 'dev' branch deploys to 'dev' environment
    paths-ignore:
    - 'bigquery/**'
    - 'documentation/**'
    - 'terraform/common/**'
    - '**.md'

  pull_request:
    branches:
    - master
    types:
      - labeled
      - opened
      - synchronize
      - reopened

    paths-ignore:
    - 'bigquery/**'
    - 'documentation/**'
    - 'terraform/common/**'
    - 'terraform/monitoring/**'
    - '**.md'

env:
 DOCKER_REPOSITORY: ghcr.io/dfe-digital/teaching-vacancies

jobs:

  build:
    if: contains(github.event.pull_request.labels.*.name, 'deploy') || github.event_name != 'pull_request'
    name: Build docker image
    outputs:
      build_git_tag: ${{steps.tag_version.outputs.new_tag}}
      matrix_environments: ${{ env.MATRIX_ENVIRONMENTS }}
      docker_image_tag: ${{ env.DOCKER_IMAGE_TAG }}
      commit_sha: ${{ env.COMMIT_SHA }}
      scan_docker_image: ${{ env.DOCKER_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
    runs-on: ubuntu-20.04

    steps:
      - name: Check workflow concurrency
        uses: DFE-Digital/github-actions/turnstyle@master
        with:
          initial-wait-seconds: 12
          poll-interval-seconds: 20
          abort-after-seconds: 1800
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables (Push)
        if: github.event_name == 'push'
        run: |
          GIT_REF=${{ github.ref }}
          echo "GIT_BRANCH=${GIT_REF##*/}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Set environment variables (Pull request)
        if: github.event_name == 'pull_request'
        run: |
          # This is the actual PR branch
          GIT_REF=${{ github.head_ref }}
          echo "GIT_BRANCH=${GIT_REF##*/}" >> $GITHUB_ENV
          # This is the latest commit on the actual PR branch
          echo "COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Set DOCKER_IMAGE_TAG environment variable
        run: echo "DOCKER_IMAGE_TAG=${GIT_BRANCH}-${COMMIT_SHA}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}

      - name: Build and push docker image from builder target
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          # Cache from builder target tagged with branch name, may be empty first time branch is pushed
          # Cache from builder target tagged with master branch name, always present, maybe less recent
          cache-from: |
            ${{ env.DOCKER_REPOSITORY }}:builder-${{ env.GIT_BRANCH }}
            ${{ env.DOCKER_REPOSITORY }}:builder-master
          push: true
          # Tag with branch name for reuse
          tags: ${{ env.DOCKER_REPOSITORY }}:builder-${{ env.GIT_BRANCH }}
          target: builder

      - name: Build and push docker image from production target
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ env.COMMIT_SHA }}
          # Cache from builder target built above, always present
          # Cache from production target tagged with branch name, may be empty first time branch is pushed
          # Cache from production target tagged with master branch name, always present, maybe less recent
          cache-from: |
            ${{ env.DOCKER_REPOSITORY }}:builder-${{ env.GIT_BRANCH }}
            ${{ env.DOCKER_REPOSITORY }}:${{ env.GIT_BRANCH }}
            ${{ env.DOCKER_REPOSITORY }}:master
          push: true
          # Tag with branch name for reuse
          # Tag with branch name and commit sha for unique identification
          tags: |
            ${{ env.DOCKER_REPOSITORY }}:${{ env.GIT_BRANCH }}
            ${{ env.DOCKER_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
          target: production

      # Creates a unique git tag to help synchronising dependent jobs
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set matrix environments (Push to master)
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: echo "MATRIX_ENVIRONMENTS={\"environment\":[\"staging\",\"production\",\"qa\"]}" >> $GITHUB_ENV

      - name: Set matrix environments (Push to non master branch)
        if: github.event_name == 'push' && github.ref != 'refs/heads/master'
        run: echo "MATRIX_ENVIRONMENTS={\"environment\":[\"${GIT_BRANCH}\"]}" >> $GITHUB_ENV

      - name: Set matrix environments (Pull request)
        if: github.event_name == 'pull_request'
        run: echo "MATRIX_ENVIRONMENTS={\"environment\":[\"review\"]}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Scan ${{ env.DOCKER_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }} image
        run: |
          mkdir -p ~/.docker/cli-plugins && \
          curl https://github.com/docker/scan-cli-plugin/releases/latest/download/docker-scan_linux_amd64 -L -s -S -o ~/.docker/cli-plugins/docker-scan &&\
          chmod +x ~/.docker/cli-plugins/docker-scan
          cd ~/.docker/cli-plugins/

          docker scan ${{ env.DOCKER_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }} --token ${{ secrets.SYNK_TOKEN }}



#--token ${{ secrets.SNYK_TOKEN }}



  deploy:
    name: Deploy app
    strategy:
      max-parallel: 1
      # Creates a variable 'environment' from the build job output 'matrix_environments'
      # Its value is the list of environments. The matrix iterates once per environment and the value is accessed via ${{ matrix.environment }}
      matrix: ${{fromJSON(needs.build.outputs.matrix_environments)}}
    needs: [build]
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      name: Checkout Code

    - name: Set environment variables from build output
      run: |
        echo "COMMIT_SHA=${{ needs.build.outputs.commit_sha }}" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_TAG=${{ needs.build.outputs.docker_image_tag }}" >> $GITHUB_ENV
        echo "BUILD_GIT_TAG=${{ needs.build.outputs.build_git_tag}}" >> $GITHUB_ENV

    - name: Set environment variable (Push)
      if: github.event_name == 'push'
      run: |
        ENVIRONMENT=${{ matrix.environment }}
        echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV

    - name: Set environment variable (Pull request)
      if: github.event_name == 'pull_request'
      run: |
        ENVIRONMENT=review-pr-${{ github.event.number }}
        echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV

    - name: Trigger Deploy App Workflow for ${{ env.ENVIRONMENT }}
      uses: benc-uk/workflow-dispatch@v1.1
      with:
        workflow: Deploy App to Environment   # Name of the triggered workflow
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        ref: ${{ env.BUILD_GIT_TAG }}         # Different than branch HEAD SHA in case of a PR
        inputs: '{"environment": "${{ env.ENVIRONMENT }}", "tag": "${{ env.DOCKER_IMAGE_TAG }}"}'

    - name: Wait for Deploy App Workflow for ${{ env.ENVIRONMENT }}
      id: wait_for_deploy_app
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        checkName: Deploy ${{ env.DOCKER_IMAGE_TAG }} to ${{ env.ENVIRONMENT }} # Job name within triggered workflow
        ref: ${{ env.BUILD_GIT_TAG }}
        timeoutSeconds: 1200
        intervalSeconds: 14

    - name: Notify twd_tv_dev channel on ${{ env.ENVIRONMENT }} deployment failure
      if: steps.wait_for_deploy_app.outputs.conclusion != 'success'
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Deployment failure
        SLACK_MESSAGE: 'Deployment of Docker image ${{ env.DOCKER_IMAGE_TAG }} to ${{ env.ENVIRONMENT }} - unsuccessful <!channel>'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    - name: Exit whole workflow if ${{ env.ENVIRONMENT }} deployment was not successful
      if: steps.wait_for_deploy_app.outputs.conclusion != 'success'
      run: exit 1

    - name: Trigger Smoke Test
      uses: benc-uk/workflow-dispatch@v1.1
      with:
        workflow: Smoke Test
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        inputs: '{"paas_environment": "${{ env.ENVIRONMENT }}", "sha": "${{ env.COMMIT_SHA }}"}'
        ref: ${{ env.BUILD_GIT_TAG }}

    - name: Wait for smoke test
      id: wait_for_smoke_test
      uses: fountainhead/action-wait-for-check@v1.0.0
      with:
        token: ${{ secrets.GIT_HUB_SERVICE_ACCOUNT_TOKEN }}
        checkName: Smoke Test ${{ env.ENVIRONMENT }} ${{ env.COMMIT_SHA }}
        ref: ${{ env.BUILD_GIT_TAG }}
        timeoutSeconds: 300
        intervalSeconds: 15

    - name: Exit whole workflow if ${{ env.ENVIRONMENT }} smoke test was not successful
      if: steps.wait_for_smoke_test.outputs.conclusion != 'success'
      run: exit 1

    - name: Post sticky pull request comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        message: |
          Review app deployed to <https://teaching-vacancies-${{ env.ENVIRONMENT }}.london.cloudapps.digital>

    - name: Send job status message to twd_tv_dev channel
      if: failure()
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_CHANNEL: twd_tv_dev
        SLACK_USERNAME: CI Deployment
        SLACK_TITLE: Deployment ${{ job.status }}
        SLACK_MESSAGE: 'Deployment of Docker image ${{ env.DOCKER_IMAGE_TAG }} to ${{matrix.environment}} - ${{ job.status }}'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  post_deployment:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    name: Post deployment steps
    needs: deploy
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        name: Checkout Code

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          role-to-assume: Deployments
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Terraform pin version
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.5

      - name: Deploy monitoring
        run: |
          terraform init -upgrade=true -reconfigure -input=false
          terraform apply -input=false -auto-approve
        working-directory: terraform/monitoring

      - name: Download and extract Gov.UK frontend archive
        run: bin/regenerate-offline

      - name: Sync offline S3 bucket
        run: bin/sync-offline

      - name: Send job status message to twd_tv_dev channel
        if: always()
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_CHANNEL: twd_tv_dev
          SLACK_USERNAME: CI Deployment
          SLACK_TITLE: Deployment ${{ job.status }}
          SLACK_MESSAGE: 'Deployment of Docker tag ${{ github.sha }} to Staging, Prod and QA - ${{ job.status }}'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
