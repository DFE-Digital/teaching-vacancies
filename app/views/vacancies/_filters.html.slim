ruby:
  items = [
    {
      legend: t("jobs.filters.job_roles"),
      key: "job_roles",
      attribute: :job_roles,
      selected: @form.job_roles.reject { |role| role == "ect_suitable" },
      options: @form.job_role_options,
      value_method: :first,
      text_method: :last,
      selected_method: :last,
      small: true,
    },
    {
      legend: t("jobs.filters.ect_suitable"),
      key: "ect_suitable",
      attribute: :job_roles,
      selected: @form.job_roles.include?("ect_suitable") ? @form.job_roles : [],
      options: @form.ect_suitable_options,
      value_method: :first,
      text_method: :second,
      selected_method: :last,
      small: true,
    },
    {
      legend: t("jobs.filters.send_responsible"),
      key: "send_responsible",
      attribute: :job_roles,
      selected: @form.job_roles.include?("send_responsible") ? @form.job_roles : [],
      options: @form.send_responsible_options,
      value_method: :first,
      text_method: :second,
      selected_method: :last,
      small: true,
    },
    {
      legend: t("jobs.filters.phases"),
      key: "education_phase",
      attribute: :phases,
      selected: @form.phases,
      options: @form.phase_options,
      value_method: :first,
      text_method: :last,
      selected_method: :last,
      small: true,
    },
    {
      legend: t("jobs.filters.working_patterns"),
      key: "working_patterns",
      attribute: :working_patterns,
      selected: @form.working_patterns,
      options: @form.working_pattern_options,
      value_method: :first,
      text_method: :last,
      selected_method: :last,
      small: true,
    },
  ]

  subject_filters =
    {
      legend: t("jobs.filters.subject"),
      key: "subjects",
      attribute: :subjects,
      selected: @form.subjects,
      options: SUBJECT_OPTIONS,
      value_method: :first,
      text_method: :first,
      selected_method: :first,
      hint_method: :last,
      small: true,
    }

  items.insert(1, subject_filters) if current_variant?(:"2022_01_subjects_filters_test", :subjects_filters)

.search-controls__panel
  = render(PanelComponent.new(button_text: t("buttons.filters_toggle_panel", count: @form.total_filters), heading_text: "Filter results")) do |panel|
    - panel.body do
      = render(FiltersComponent.new(form: f,
        filters: { total_count: @form.total_filters },
        items: items,
        options: { remove_buttons: true, mobile_variant: true, close_all: true, autosubmit_form: true, filter_for: :job_search },
        html_attributes: { tabindex: "-1", id: "filters-component" }))
