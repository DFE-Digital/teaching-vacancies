= f.govuk_text_field :keyword,
  label: { text: t("jobs.search.keyword"), size: "s" },
  hint: { text: t("jobs.search.keyword_v2_hint") },
  autocomplete: "off"
- unless @organisation
  = f.govuk_text_field :location,
    label: { text: t("jobs.search.location"), size: "s" },
    autocomplete: "off",
    form_group: { class: %w[location-finder__input govuk-!-margin-bottom-0 autocomplete], data: { source: "getLocationSuggestions", controller: "autocomplete" } },
    data: { coordinates: @vacancies_search&.point_coordinates || @point_coordinates }
  = render "vacancies/search/current_location", target: "jobseekers-subscription-form-location-field"
  = render "vacancies/search/radius", f: f, wide: false

.divider-bottom class="govuk-!-margin-top-6"

.plain-styling
  = filters(submit_button: f.govuk_submit(t("buttons.apply_filters")),
    options: { remove_filter_links: false }) do |filters_component|
      - filters_component.with_group key: "education_phase", component: f.govuk_collection_check_boxes(:phases, @form.phase_options, :first, :last, small: false, legend: { text: t("jobs.filters.phases") }, hint: nil)
      - filters_component.with_group key: "working_patterns", component: f.govuk_collection_check_boxes(:working_patterns, @form.working_pattern_options, :first, :last, small: false, legend: { text: t("jobs.filters.working_patterns") }, hint: nil)
      - filters_component.with_group key: "ect_statuses", component: f.govuk_collection_check_boxes(:ect_statuses, @form.ect_status_options, :first, :last, small: false, legend: { text: t("jobs.filters.ect_suitable") }, hint: nil)
      - filters_component.with_group key: "visa_sponsorship_availability", component: f.govuk_collection_check_boxes(:visa_sponsorship_availability, @form.visa_sponsorship_availability_options, :first, :last, small: false, legend: { text: t("jobs.filters.visa_sponsorship_availability.legend") }, hint: nil)
      - teaching_job_roles = capture do
        = govuk_details(summary_text: safe_join([tag.span(t("jobs.filters.teaching_job_roles"), "aria-label": t("jobs.aria_labels.filters.teaching_job_roles"), title: t("jobs.filters.teaching_job_roles"))]), open: @form.teaching_job_roles.any?) do
          = f.govuk_collection_check_boxes(:teaching_job_roles, @form.teaching_job_role_options, :first, :last, small: true, legend: nil, hint: nil)
      - support_job_roles = capture do
        = govuk_details(summary_text: safe_join([tag.span(t("jobs.filters.support_job_roles"), "aria-label": t("jobs.aria_labels.filters.support_job_roles"), title: t("jobs.filters.support_job_roles"))]), open: @form.support_job_roles.any?) do
          = f.govuk_collection_check_boxes(:support_job_roles, @form.support_job_role_options, :first, :last, small: true, legend: nil, hint: nil)

      - filters_component.with_group key: "teaching_job_roles", component: teaching_job_roles
      - filters_component.with_group key: "support_job_roles", component: support_job_roles
      - subjects = capture do
        = govuk_details(summary_text: safe_join([tag.span(t("jobs.filters.subjects"), "aria-label": t("jobs.aria_labels.filters.subjects"), title: t("jobs.filters.subjects"))]), open: @form.subjects) do
          = f.govuk_collection_check_boxes(:subjects,
              SUBJECT_OPTIONS,
              :first,
              :first,
              :last,
              small: true,
              legend: nil,
              hint: nil,
              collection_count: SUBJECT_OPTIONS.count,
              options: { scrollable: true },
              text: { aria_label: t("jobs.filters.subject"), placeholder: t("helpers.hint.publishers_job_listing_subjects_form.subjects_placeholder") })

      - filters_component.with_group key: "subjects", component: subjects

.divider-bottom class="govuk-!-margin-top-4"

- if jobseeker_signed_in?
  = f.hidden_field :email, value: current_jobseeker.email
- else
  = f.govuk_email_field :email, label: { size: "s" }, required: true

= f.govuk_collection_radio_buttons :frequency, Subscription.frequencies.keys, :to_s
