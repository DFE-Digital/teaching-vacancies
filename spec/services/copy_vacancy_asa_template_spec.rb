require "rails_helper"

RSpec.describe CopyVacancyAsaTemplate do
  describe "#call" do
    let(:school) { create(:school) }
    let(:vacancy) do
      create(:vacancy, :past_publish,
             job_title: "Maths teacher",
             slug: "maths-teacher",
             organisations: [school])
    end
    let(:result) { described_class.call(vacancy) }
    let(:steps_without_dates) do
      %w[job_title
         job_role
         contract_information
         pay_package
         about_the_role
         include_additional_documents
         school_visits
         visa_sponsorship
         contact_details]
    end

    it "creates a new vacancy as draft" do
      expect(result).to be_a(Vacancy)
      expect(Vacancy.count).to eq(2)
      expect(result.type).to eq("DraftVacancy")
      expect(result.organisations).to eq [school]
    end

    it "does not change the original vacancy" do
      # Needed to compare a FactoryBot object fields for updated_at and created_at
      # and against the record it creates in Postgres.
      freeze_time do
        described_class.call(vacancy)

        # searchable_content is autogenerated and its string representation is non-deterministic
        expect(vacancy.attributes.except("searchable_content"))
          .to eq(Vacancy.find(vacancy.id).attributes.except("searchable_content"))
      end
    end

    it "copies the completed steps without the dates" do
      expect(result.completed_steps).to match_array(steps_without_dates)
    end

    context "with a legacy email application" do
      let(:vacancy) { create(:vacancy, :legacy_email_application, organisations: [school]) }

      it "converts to uploaded form" do
        expect(result.receive_applications).to eq("uploaded_form")
      end
    end

    context "without a publish date" do
      let(:vacancy) { create(:draft_vacancy, publish_on: nil, organisations: [school]) }

      it "doesnt reset date fields" do
        expect(result.expires_at).to eq(vacancy.expires_at)
      end
    end

    context "when there are supporting documents and not past published" do
      let(:vacancy) { create(:vacancy, :with_supporting_documents, organisations: [school]) }
      let(:supporting_documents) { vacancy.supporting_documents.attachments }

      it "copies supporting_documents" do
        expect(result.supporting_documents.attachments.map(&:blob_id)).to eq(supporting_documents.map(&:blob_id))
      end

      it "sets include_additional_documents" do
        expect(result.include_additional_documents).to be true
      end

      it "has adds documents to completed steps" do
        expect(result.completed_steps).to match_array(steps_without_dates + %w[documents important_dates start_date])
      end
    end

    context "when an application form has been attached" do
      let(:vacancy) { create(:vacancy, :with_uploaded_application_form, organisations: [school]) }
      let(:application_form) { vacancy.application_form.attachments }

      it "copies the application form" do
        expect(result.application_form.attachments.map(&:blob_id)).to eq(application_form.map(&:blob_id))
      end
    end

    it "does not copy the slug of a vacancy" do
      expect(Vacancy.find(result.id).slug).not_to eq("maths-teacher")
    end
  end
end
